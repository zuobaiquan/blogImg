##  剩余操作符(spread operator)
>  扩展语法允许一个表达式在期望多个参数（用于函数调用）或多个元素（用于数组字面量）或多个变量（用于解构赋值）的位置扩展。 详细使用见[MDN文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator)
语法:
1. 用于函数调用:
         `myFunction(...iterableObj);`
2. 用于数组字面量:
```
const [...iterableObj] = [1, 3, 5, 7, 9];
[...iterableObj, 0, 2, 4, 6, 8];   // [1, 3, 5, 7, 9, 0, 2, 4, 6, 8]
[0, 2, ...iterableObj, 4, 6, 8];   // [0, 2, 1, 3, 5, 7, 9, 4, 6, 8]
[...iterableObj, 0, 2, 4, 5, 6, 8, ...iterableObj];    // [1, 3, 5, 7, 9, 0, 2, 4, 5, 6, 8, 1, 3, 5, 7, 9]
```
3. 用于对象字面量 (new in ECMAScript; stage 3 draft)
    `let objClone = { ...obj};`

**两种使用方式：**
1. 展开运算符(spread operator)，作用是把东西展开。可以用在array和object上都行。比如：

```
let a = [1,2,3];
let b = [0, ...a, 4]; // [0,1,2,3,4]

let obj = { a: 1, b: 2 };
let obj2 = { ...obj, c: 3 }; // { a:1, b:2, c:3 }
let obj3 = { ...obj, a: 3 }; // { a:3, b:2 }
```
2.  剩余操作符(rest operator)，是解构的一种，意思是把剩余的东西放到一个array里面赋值给它。一般只针对array的解构。比如：
> ...rest 必须是参数列表的最后一个参数！而...spread 无限制!

```
let a = [1,2,3];
let [b, ...c] = a;
b; // 1
c; // [2,3]

// 也可以
let a = [1,2,3];
let [b, ...[c,d,e]] = a;
b; // 1
c; // 2
d; // 3
e; // undefined

// 也可以
function test(a, ...rest){
  console.log(a); // 1
  console.log(rest); // [2,3]
}
test(1,2,3)
```
